import matplotlib.pyplot as plt
import numpy as np
import random
from matplotlib.animation import FuncAnimation

# Define the selection sort function with a visual output
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
        yield arr  # Yield the array at each step for visualization

# Generate random data for sorting
data = [random.randint(0, 100) for i in range(25)]

fig, ax = plt.subplots()  # Create a figure and a set of subplots
bar_rects = ax.bar(range(len(data)), data, align="edge")  # Draw initial bars

# Set the y-axis limit (adjust if necessary)
ax.set_ylim(0, int(1.1*max(data)))

# Initialize the visualization
def init():
    ax.clear()  # Clear the axes
    plt.xlabel('Index')  # Set the x-axis label
    plt.ylabel('Valeur')  # Set the y-axis label
    plt.title('Tri par SÃ©lection')  # Set the title
    bar_rects = plt.bar(range(len(data)), data, align="edge", color="blue")  # Redraw bars
    return bar_rects

# Animation update function to update the visualization
def update_fig(A, rects, iteration):
    for rect, val in zip(rects, A):  # Update each bar's height
        rect.set_height(val)
    iteration[0] += 1

# Create the animation
ani = FuncAnimation(fig, func=update_fig, fargs=(bar_rects, [0]), frames=selection_sort(data), init_func=init, interval=1, repeat=False)

plt.show()  # Display the plot
