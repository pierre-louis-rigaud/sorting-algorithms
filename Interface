import tkinter as tk
from tkinter import ttk, Canvas
import random

def selection_sort(arr):
    """Sorts an array using the selection sort algorithm."""
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr


def generate_colors(n):
    """Generates a list of hexadecimal colors."""
    return ['#' + ''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for _ in range(n)]

def draw_rectangles(canvas, arr, colors):
    """Draws rectangles representing sorted values."""
    canvas.delete("all")  
    c_width = int(canvas.cget("width"))
    c_height = int(canvas.cget("height"))
    bar_width = c_width / len(arr)
    for i, val in enumerate(arr):
        x0 = i * bar_width
        y0 = c_height - (val + 1)  
        x1 = (i + 1) * bar_width
        y1 = c_height
        canvas.create_rectangle(x0, y0, x1, y1, fill=colors[i], outline=colors[i])

def sort_and_draw():
    """Sorts the numbers and draws the visualization."""
    numbers = list(map(int, numbers_entry.get().split()))
    colors = generate_colors(len(numbers)) 
    algorithm = algorithm_combobox.get()
    sorted_numbers = []
    if algorithm == 'Tri par Sélection':
        sorted_numbers = selection_sort(numbers)
    draw_rectangles(canvas, sorted_numbers, colors)
    result_label.config(text=f"Result: {sorted_numbers}")

app = tk.Tk()
app.title("Sorting Demonstration")

canvas = Canvas(app, width=600, height=400)
canvas.pack()

algorithm_label = tk.Label(app, text="Choose a sorting algorithm:")
algorithm_label.pack()

algorithm_combobox = ttk.Combobox(app, values=[
    "Tri par Sélection", 
])
algorithm_combobox.pack()

numbers_label = tk.Label(app, text="Enter numbers separated by a space:")
numbers_label.pack()

numbers_entry = tk.Entry(app)
numbers_entry.pack()

sort_button = tk.Button(app, text="Sort and Draw", command=sort_and_draw)
sort_button.pack()

result_label = tk.Label(app, text="Result:")
result_label.pack()

app.mainloop()

